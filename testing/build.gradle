import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'com.enonic.defaults'
    id 'com.enonic.xp.base'
    id 'com.github.node-gradle.node'
}
group = 'com.enonic.xp.js_testing'

repositories {
    mavenCentral()
    xp.enonicRepo('dev')
}

configurations {
    distro
}

def unpackDir = layout.buildDirectory.dir("install").get()
def distroDir = unpackDir.dir("enonic-xp-generic-$version")
def testDataDir = "$projectDir/test-data/common-config"

def xpHome = distroDir.dir( "home" )
def configDir = xpHome.dir( "config" )
def appName = "app-main"
def appFile = "$distroDir/system/40/${appName}-${version}.jar"
def appUrl = project.hasProperty( 'appUrl' ) ? appUrl : "file:///$projectDir/../build/libs/${appName}.jar"

dependencies {
    distro "com.enonic.xp:enonic-xp-generic:$version@tgz"
}

tasks.register( 'unpackDistro', Copy ) {
    from {
        configurations.distro.collect { tarTree( it ) }
    }
    into unpackDir
}

tasks.register( 'copyConfig', Copy ) {
    println "$testDataDir${File.separator}common-config"
    from testDataDir
    include '**.*.cfg'
    include '*.properties'
    into file( configDir )
    mustRunAfter unpackDistro
}


tasks.register( 'deployApp', DefaultTask ) {
    outputs.files( appFile )
    outputs.upToDateWhen { false }
    doLast {
        def f = new File(appFile as String)
        println "Deleting  ${appFile}. Exists ${f.exists()}"

        f.delete()

        println "Copying from ${appUrl} to ${appFile}"
        new URL(appUrl as String).withInputStream { i -> f.withOutputStream { it << i } }
    }
    mustRunAfter unpackDistro
}

def process
tasks.register( 'startServer' ) {
    dependsOn unpackDistro
    doLast {
        def pb
        if (DefaultNativePlatform.getCurrentOperatingSystem().windows) {
            pb = new ProcessBuilder('cmd', '/c', "${distroDir}\\bin\\server.bat")
        }
        else {
            pb = new ProcessBuilder("${distroDir}/bin/server.sh")
        }
        Map<String, String> env = pb.environment()
        env.put("XP_HOME", "${xpHome}".toString())

        def logsPath = layout.buildDirectory.dir("reports/logs").get()
        mkdir logsPath.asFile
        pb.redirectOutput(logsPath.file("xp.log").asFile)
        pb.redirectErrorStream(true)
        process = pb.start()
        sleep(60 * 1000)
    }
}

tasks.register( 'stopServer' ) {
    doLast {
        if (DefaultNativePlatform.getCurrentOperatingSystem().windows) {
            Runtime.getRuntime().exec("taskkill /F /T /PID " + process.pid());
        } else {
            process.destroy()
        }
    }
}

tasks.register( 'cleanup', Delete ) {
    delete './build/reports/allure'
}

tasks.register( 'generateReportAndStopServer', NpmTask ) {
    args = ['run-script', 'allure-report']
    finalizedBy cleanup
    finalizedBy stopServer
}

tasks.register( 'w_testAdminHomeChrome', NpmTask ) {
    dependsOn ( npmInstall, unpackDistro, copyConfig, deployApp, startServer )
    args = ['run-script', 'test_admin_home:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testAdminHomeChromeLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_admin_home:wdio_chrome']
}

