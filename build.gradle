plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.1.2'
    id 'com.enonic.xp.app' version '3.4.0'
    id 'com.github.node-gradle.node' version '7.0.1'
}

def xpVersion=version

app {
    name = 'com.enonic.xp.app.main'
    group = 'com.enonic.xp'
    displayName = 'Enonic XP Home App'
    systemVersion = "${xpVersion}"
    systemApp = true
}

configurations {
    devResources {
        attributes {
            attribute( LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named( LibraryElements, 'dev-resources' ) )
        }
    }
}

apply from: "$projectDir/gradle/defaults.gradle"
apply from: "$projectDir/gradle/env.gradle"
apply from: "$projectDir/gradle/node.gradle"
apply from: "$projectDir/gradle/lib-admin.gradle"

dependencies {
    compileOnly "com.enonic.xp:admin-api:${xpVersion}"

    include "com.enonic.xp:lib-admin:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-auth:${xpVersion}"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    include "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    devResources "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    include "com.enonic.lib:lib-mustache:2.1.0"
    include 'com.enonic.lib:lib-router:3.1.0'

    testImplementation "org.mockito:mockito-core:4.8.0"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.1"
    testImplementation( testFixtures( "com.enonic.xp:jaxrs-impl:${xpVersion}" ) )

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.9.1"
}

tasks.register('npmCheck', NpmTask) {
    dependsOn( 'npmInstall' )
    args = [
            'run',
            'check:types'
    ]
    environment = [
            'FORCE_COLOR': 'true',
    ]
}

tasks.register('lint', NpmTask ) {
    group "verification"
    dependsOn( 'npmInstall' )
    args = ['run', 'lint']
    outputs.upToDateWhen { false }
}

check.configure {
    dependsOn( 'lint', 'npmCheck' )
}

tasks.register( 'npmBuild', NpmTask) {
    dependsOn npmInstall
    description = 'Build UI resources (ts, css, etc).'
    environment = [
        'FORCE_COLOR': 'true',
        'LOG_LEVEL_FROM_GRADLE': gradle.startParameter.logLevel.toString(),
        'NODE_ENV': nodeEnvironment()
    ]
    args = ['run', 'build']
    inputs.dir '.xp/dev'
    inputs.dir 'src/main/resources'
    inputs.file 'tsup.config.ts'
    outputs.dir "$buildDir/build/resources/main"
}

processResources {
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.js'
    exclude '**/*.ts'
}

jar {
    def whitelist = [
        /.*bundle\.js$/,
        /.*\/widgets\/.*\.js$/,
    ] as List

    if (isProd()) {
        exclude '**/*.map'
    } else {
        whitelist.add( /.*\.map$/ )
    }

    exclude { el ->
        !el.directory && el.relativePath.contains( 'assets/js' ) && ( !whitelist.any { re -> el.relativePath.toString().matches( re ) } )
    }

    outputs.dir "${buildDir}/resources/main"

    dependsOn( 'npmBuild', 'test', 'javadoc' )
}

test {
    useJUnitPlatform()
    systemProperty 'java.awt.headless', 'true'
    jvmArgs '-noverify', '-XX:TieredStopAtLevel=1'
}
