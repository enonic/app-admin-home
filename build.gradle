plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    alias(libs.plugins.enonic.defaults)
    alias(libs.plugins.enonic.xp.app)
    alias(libs.plugins.node.gradle)
}

allprojects {
    pluginManager.withPlugin( 'java' ) {
        java {
            toolchain {
                languageVersion = JavaLanguageVersion.of( 21 )
            }

            sourceCompatibility = JavaVersion.VERSION_21
            targetCompatibility = sourceCompatibility
        }
    }

    apply from: "$rootDir/gradle/env.gradle"
    apply from: "$rootDir/gradle/node.gradle"

    if ( project.name != 'testing' ) {
        apply from: "$rootDir/gradle/lib-admin.gradle"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo( 'dev' )
}

configurations {
    devResources {
        attributes {
            attribute( LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named( LibraryElements, 'dev-resources' ) )
        }
    }
}

dependencies {
    implementation "com.enonic.xp:admin-api:${version}"
    implementation "com.enonic.xp:script-api:${version}"

    include "com.enonic.xp:lib-admin:${version}"
    include "com.enonic.xp:lib-portal:${version}"
    include "com.enonic.xp:lib-auth:${version}"
    include "com.enonic.xp:lib-i18n:${version}"
    include "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    devResources "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    include libs.lib.mustache
    include libs.lib.asset

    testImplementation(platform(libs.junit.bom))
    testImplementation(platform(libs.mockito.bom))
    testImplementation libs.junit.jupiter
    testRuntimeOnly libs.junit.launcher
    testImplementation libs.mockito.jupiter
    testImplementation( testFixtures( "com.enonic.xp:jaxrs-impl:${version}" ) )
}

app {
    name = "${group}.${projectName}"
    displayName = 'Enonic XP Home App'
    systemVersion = "${version}"
    systemApp = true
    devSourcePaths += file( "$rootDir/../lib-admin-ui/src/main/resources" )
}

// Verification tasks
tasks.register( 'checkTypes', PnpmTask ) {
    dependsOn tasks.named( 'pnpmInstall' )
    group = 'verification'
    args = ['run', 'check:types']
    outputs.cacheIf { false }
}

tasks.register( 'checkLint', PnpmTask ) {
    dependsOn tasks.named( 'pnpmInstall' )
    group = 'verification'
    args = ['run', 'check:lint']
    outputs.cacheIf { false }
}

tasks.register( 'pnpmCheck', PnpmTask ) {
    dependsOn tasks.named( 'pnpmInstall' )
    group = 'verification'
    args = ['run', 'check']
    outputs.cacheIf { false }
}

// Build tasks
tasks.register( 'pnpmBuild', PnpmTask ) {
    dependsOn( 'pnpmInstall' )
    environment = ['NODE_ENV': nodeEnvironment()]
    description = 'Build UI resources (ts, css, etc) with Vite.'
    args = ['run', nodeEnvironment() == 'production' ? 'build:prod' : 'build']
    inputs.dir '.xp/dev'
    inputs.dir 'src/main'
    inputs.file 'vite.config.ts'
    outputs.dir "$buildDir/resources/main/assets"
}

tasks.register( 'yolo' ) {
    description = 'Build without running install, check, or test tasks'

    dependsOn tasks.named( 'deploy' )
    dependsOn tasks.named( 'checkTypes' )

    nodeSetup.enabled = false
    npmSetup.enabled = false
    pnpmSetup.enabled = false
    pnpmCheck.enabled = false
    checkLint.enabled = false
    check.enabled = false
    test.enabled = false
    javadoc.enabled = false
}

// Task configurations
tasks.named( 'jar' ).configure {
    exclude 'assets/**/tsconfig.tsbuildinfo'

    if ( isProd() ) {
        exclude 'assets/**/*.map'
    }

    includeEmptyDirs = false

    dependsOn tasks.named( 'pnpmBuild' )
}

tasks.named( 'processResources' ).configure {
    // Don't need source files
    exclude 'assets/js/**'
    exclude 'assets/styles/**'

    // Inlined by the Vite into CSS
    exclude 'assets/fonts/**'
    exclude 'assets/img/**'

    includeEmptyDirs = false
}

tasks.named( 'test' ).configure {
    useJUnitPlatform()
    systemProperty 'java.awt.headless', 'true'
    jvmArgs '-XX:TieredStopAtLevel=1'
}

tasks.named( 'jacocoTestReport' ).configure {
    reports {
        xml.required = true
        html.required = true
    }
    mustRunAfter jar
}

// Lifecycle wiring
tasks.named( 'check' ).configure {
    dependsOn tasks.named( 'pnpmCheck' )
    dependsOn jacocoTestReport
}
