plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.0.1'
    id 'com.enonic.xp.app' version '3.0.0'
    id "com.github.node-gradle.node" version '3.1.0'
}

apply from: "$rootDir/gradle/defaults.gradle"

def xpVersion=version

app {
    name = 'com.enonic.xp.app.main'
    group = 'com.enonic.xp'
    displayName = 'Enonic XP Home App'
    systemVersion = "${xpVersion}"
    systemApp = true
}

dependencies {
    compileOnly "com.enonic.xp:admin-api:${xpVersion}"
    
    include "com.enonic.xp:lib-admin:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-auth:${xpVersion}"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    include "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    include "com.enonic.lib:lib-mustache:2.0.0"
}

node {
    download = true
    version = '14.15.0'
}

task flush( type: Delete, dependsOn: clean ) {
    description = 'Clean the project from built sources and dependencies'
    delete '.xp'
}

task npmInstallForce( type: NpmTask ) {
    description = 'Update all project node dependencies'
    args = [ 'install', '--force' ]
}

task lint( type: NpmTask, dependsOn: npmInstall ) {
    args = [ 'run', 'lint' ]
    inputs.files fileTree( dir: 'modules', include: '**/src/main/**.*' )
    outputs.dir file('gradle')
    outputs.upToDateWhen { false }
}

task webpack( type: NpmTask, dependsOn: [npmInstall, lint] ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    description = 'Build UI resources (ts, css, etc).'
    args = [ 'run', 'build' ]
    inputs.dir '.xp/dev'
    inputs.dir 'src/main'
    inputs.file 'webpack.config.js'
    outputs.dir "${buildDir}/resources/main"
}

task cleanNode( type: Delete ) {
    delete 'node_modules'
}

npmInstall.mustRunAfter unpackDevResources

jar {
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.js'
    exclude '**/*.d.ts'

    def whitelist = [
        /.*bundle\.js$/,
    ] as List

    if (isProd()) {
        exclude '**/*.map'
    } else {
        whitelist.add( /.*\.map$/ )
    }

    exclude {
        FileTreeElement el -> !el.directory && el.relativePath.contains('assets/js') && (!whitelist.any { re -> el.relativePath.toString().matches( re ) })
    }

    outputs.dir "${buildDir}/resources/main"

    dependsOn += webpack
}

project.afterEvaluate {
    jar {
        bnd ('Private-Package': '!dev.*, *;-split-package:=merge-first')
    }
}

processResources.dependsOn += unpackDevResources

if ( hasProperty( 'env' ) )
{
    addBuildDependency()
    applyExcludedTasks()
}

def applyExcludedTasks() {
    if ( isLibAdminUiIncluded() )
    {
        def libAdminUi = gradle.includedBuild( 'lib-admin-ui' )
        def excludedTasks = gradle.startParameter.getExcludedTaskNames().findAll( { it == 'lint' || it == 'test' } )
        libAdminUi.getLoadedSettings().getStartParameter().setExcludedTaskNames( excludedTasks )
    }
}

def addBuildDependency() {
    if ( isLibAdminUiIncluded() )
    {
        def buildTask = gradle.includedBuild( 'lib-admin-ui' ).task( ':build' )

        build.dependsOn += buildTask
        clean.dependsOn += gradle.includedBuild( 'lib-admin-ui' ).task( ':clean' )
        flush.dependsOn += gradle.includedBuild( 'lib-admin-ui' ).task( ':flush' )

        def webpackTask = tasks.findByPath( ':webpack' )
        def unpackDevResources = tasks.findByPath( ':unpackDevResources' )

        if ( webpackTask != null ) webpackTask.dependsOn += unpackDevResources
        unpackDevResources.dependsOn += buildTask
    }
}

def isLibAdminUiIncluded() {
    return new File( '../lib-admin-ui' ).exists()
}

def nodeEnvironment() {
    def environments = [ prod : 'production', dev: 'development' ]
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}

def isProd() {
    return hasProperty( 'env' ) ? (env == 'prod') : true
}
